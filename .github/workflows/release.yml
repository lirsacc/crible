# TODO: Make this build on tag and release to Github release, not just
# artifacts. See
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/
# for an example setup.

name: release
on:
  push:
    branches:
      - master

jobs:
  binary-build:
    name: Binary Build

    strategy:
      fail-fast: false
      matrix:
        build:
          # This one doesn't use cross as the base cross-rs docker image is YUM
          # based and not apt based and I haven't spent the time to have the
          # build deps work for both. For now this should work fine.
          # TODO: Should the x86_64-unknown-linux-gnu build happen in cross
          # docker image as well?
          - target: x86_64-unknown-linux-gnu
            cargo: cargo
            needs-docker-build: false
            rustflags: ''
          # The following targets will be built using cross-rs and rely on the
          # docker images from ci/docker.
          - target: x86_64-unknown-linux-musl
            cargo: cross
            needs-docker-build: false
            rustflags: '-C target-feature=+crt-static'
          # TODO: arm/aarch64 builds? I've tried a few things but I don't want
          # to spend too much time on this. The main issues came from the cross
          # images being built on ubuntu 16.04 which is a bit old by now.
          # There's an issue at https://github.com/cross-rs/cross/issues/517 so
          # once this is fixed we should be able to try this again.

    runs-on: ubuntu-latest

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up QEMU
        if: matrix.build.needs-docker-build == true
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Set up Docker Buildx
        if: matrix.build.needs-docker-build == true
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        if: matrix.build.needs-docker-build == true
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.build.target }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build cross build docker image
        if: matrix.build.needs-docker-build == true
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./ci/docker/${{ matrix.build.target }}.dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: localhost:5000/cross-rs/${{ matrix.build.target }}:edge
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        if: matrix.build.needs-docker-build == true
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Install packages
        if: matrix.build.cargo != 'cross'
        run: |
          sudo ci/install-build-deps.sh
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.build.target }}
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ runner.os }}-${{ matrix.build.target }}
      - name: Install Cross
        if: matrix.build.cargo == 'cross'
        run: |
          # cargo install --force --git https://github.com/cross-rs/cross cross
          cargo install cross
      - name: Build release binary
        run: |
          export TARGET_DIR="./target/${{ matrix.build.target }}"
          export RUSTFLAGS="${{ matrix.build.rustflags }}"
          ${{ matrix.build.cargo }} build --verbose --release --target ${{ matrix.build.target }}

      - name: Store build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: crible-${{ matrix.build.target }}
          path: target/${{ matrix.build.target }}/release/crible
          if-no-files-found: error
